name: workflow

on:
  push:
    branches:
      - staging
      - main

jobs:
  check:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    container:
      image: node:20
    steps:
      # Setup Node.js
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Install dependencies
      - run: npm ci

      # Run ESLint
      - run: npm run lint

      # Run tests
      - run: npm test -- src/tests/auth.test.ts

  build-and-deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: Production
    env:
      SERVICE_NAME: hw-auth-api
      GCP_PROJECT_ID: heron-wellnest
      REGION: us-central1
      ARTIFACT_REGISTRY_REPO: heron-wellnest-repo
    steps:
      - uses: actions/checkout@v3

      # Setup Node.js
      - uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Install dependencies (needed for build)
      - run: npm ci

      # Run ESLint
      - run: npm run lint

      # Run tests
      - run: npm test -- src/tests/auth.test.ts

      - uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_KEY }}

      # Setup gcloud CLI (optional if you want latest version)
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          version: latest

      - run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # Build Docker image
      - run: docker build -t ${{env.REGION}}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{env.ARTIFACT_REGISTRY_REPO}}/${{ env.SERVICE_NAME }}:latest .

      # Push Docker image
      - run: docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO}}/${{ env.SERVICE_NAME }}:latest

      # Deploy to Cloud Run
      - run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO}}/${{ env.SERVICE_NAME }}:latest \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars NODE_ENV=${{ vars.NODE_ENV }},DB_USER=${{ vars.DB_USER }},DB_NAME=${{vars.DB_NAME}},DB_HOST=${{ vars.DB_HOST }},DB_PORT=${{ vars.DB_PORT }},GOOGLE_EMAIL_DOMAIN=${{ vars.GOOGLE_EMAIL_DOMAIN }},JWT_ACCESS_TOKEN_TTL=${{ vars.JWT_ACCESS_TOKEN_TTL }},JWT_REFRESH_TOKEN_TTL=${{ vars.JWT_REFRESH_TOKEN_TTL }},JWT_ISSUER=${{ vars.JWT_ISSUER }},JWT_AUDIENCE=${{ vars.JWT_AUDIENCE }},JWT_ALGORITHM=${{ vars.JWT_ALGORITHM }} \
            --set-secrets DB_PASSWORD=DB_PASSWORD:latest,GOOGLE_CLIENT_ID=GOOGLE_CLIENT_ID:latest,JWT_SECRET=JWT_SECRET:latest \
            --timeout=300 \
            --concurrency=20 \
            --min-instances=0 \
            --max-instances=3 \
            --cpu-boost
